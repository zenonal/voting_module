require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ArgumentsController do

  def mock_argument(stubs={})
    @mock_argument ||= mock_model(Argument, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all arguments as @arguments" do
      Argument.stub(:all) { [mock_argument] }
      get :index
      assigns(:arguments).should eq([mock_argument])
    end
  end

  describe "GET show" do
    it "assigns the requested argument as @argument" do
      Argument.stub(:find).with("37") { mock_argument }
      get :show, :id => "37"
      assigns(:argument).should be(mock_argument)
    end
  end

  describe "GET new" do
    it "assigns a new argument as @argument" do
      Argument.stub(:new) { mock_argument }
      get :new
      assigns(:argument).should be(mock_argument)
    end
  end

  describe "GET edit" do
    it "assigns the requested argument as @argument" do
      Argument.stub(:find).with("37") { mock_argument }
      get :edit, :id => "37"
      assigns(:argument).should be(mock_argument)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created argument as @argument" do
        Argument.stub(:new).with({'these' => 'params'}) { mock_argument(:save => true) }
        post :create, :argument => {'these' => 'params'}
        assigns(:argument).should be(mock_argument)
      end

      it "redirects to the created argument" do
        Argument.stub(:new) { mock_argument(:save => true) }
        post :create, :argument => {}
        response.should redirect_to(argument_url(mock_argument))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved argument as @argument" do
        Argument.stub(:new).with({'these' => 'params'}) { mock_argument(:save => false) }
        post :create, :argument => {'these' => 'params'}
        assigns(:argument).should be(mock_argument)
      end

      it "re-renders the 'new' template" do
        Argument.stub(:new) { mock_argument(:save => false) }
        post :create, :argument => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested argument" do
        Argument.stub(:find).with("37") { mock_argument }
        mock_argument.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :argument => {'these' => 'params'}
      end

      it "assigns the requested argument as @argument" do
        Argument.stub(:find) { mock_argument(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:argument).should be(mock_argument)
      end

      it "redirects to the argument" do
        Argument.stub(:find) { mock_argument(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(argument_url(mock_argument))
      end
    end

    describe "with invalid params" do
      it "assigns the argument as @argument" do
        Argument.stub(:find) { mock_argument(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:argument).should be(mock_argument)
      end

      it "re-renders the 'edit' template" do
        Argument.stub(:find) { mock_argument(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested argument" do
      Argument.stub(:find).with("37") { mock_argument }
      mock_argument.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the arguments list" do
      Argument.stub(:find) { mock_argument }
      delete :destroy, :id => "1"
      response.should redirect_to(arguments_url)
    end
  end

end
